Ext.data.JsonP.TextToSpeech({"tagname":"class","name":"TextToSpeech","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{},"private":null,"id":"class-TextToSpeech","members":{"cfg":[],"property":[],"method":[{"name":"textToSpeech","tagname":"method","owner":"TextToSpeech","meta":{},"id":"method-textToSpeech"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":2384,"files":[{"filename":"attWorklightApiDoc.js","href":"attWorklightApiDoc.html#TextToSpeech"}],"html_meta":{},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/attWorklightApiDoc.html#TextToSpeech' target='_blank'>attWorklightApiDoc.js</a></div></pre><div class='doc-contents'><p>The TextToSpeech API enables your app to convert text to different speech audio formats.</p>\n\n<p>Authorization Scope: <b>TTS</b></p>\n\n\n<p><b>The TextToSpeech API provides the following methods.</b></p>\n\n<ul>\n  <li><a href=\"#!/api/TextToSpeech-method-textToSpeech\" rel=\"TextToSpeech-method-textToSpeech\" class=\"docClass\">textToSpeech</a></li>\n</ul>\n\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-textToSpeech' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='TextToSpeech'>TextToSpeech</span><br/><a href='source/attWorklightApiDoc.html#TextToSpeech-method-textToSpeech' target='_blank' class='view-source'>view source</a></div><a href='#!/api/TextToSpeech-method-textToSpeech' class='name expandable'>textToSpeech</a>( <span class='pre'>invocationData, options</span> ) : Object</div><div class='description'><div class='short'>Gets an audio transcription of the specified text. ...</div><div class='long'><p>Gets an audio transcription of the specified text.</p>\n\n<p>Authorization Model: <b>client_credentials</b></p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>invocationData</span> : Object<div class='sub-desc'><p>Specifies a JSON object containing the following parameters.</p>\n<ul><li><span class='pre'>adapter</span> : String<div class='sub-desc'><p>Specifies the name of the adapter. The only defined value for this parameter is <b>TextToSpeech</b>.</p>\n</div></li><li><span class='pre'>procedure</span> : String<div class='sub-desc'><p>Specifies the name of the procedure. The only defined value for this parameter is <b> textToSpeech</b>.</p>\n</div></li><li><span class='pre'>parameters</span> : Array<div class='sub-desc'><p>Specifies an array that contains a JSON object.</p>\n<ul><li><span class='pre'>params</span> : Object<div class='sub-desc'><p>Specifies a JSON object containing the following parameters.</p>\n<ul><li><span class='pre'>body</span> : String<div class='sub-desc'><p>The text to convert into speech.</p>\n</div></li><li><span class='pre'>accessToken</span> : String<div class='sub-desc'><p>Specifies the access token, which is the value of the <b>access_token</b> parameter returned in the <a href=\"#!/api/OAuthAdapter-method-getAccessToken\" rel=\"OAuthAdapter-method-getAccessToken\" class=\"docClass\">OAuthAdapter.getAccessToken</a> method response.</p>\n</div></li><li><span class='pre'>contentType</span> : String<div class='sub-desc'><p>Specifies the format of the text to convert. The following values are defined for this parameter.</p>\n\n<ul>\n  <li>text/plain\n    <br/>\n    The content is in plain text.</li>\n  <li>application/ssml+xml\n    <br/>\n    The content is in the Speech Synthesis Markup Language format.</li>\n</ul>\n\n</div></li><li><span class='pre'>accept</span> : String (optional)<div class='sub-desc'><p>Specifies the format of the base64-encoded body of the response. The following values are defined for this parameter.</p>\n\n<ul>\n  <li>audio/amr\n    <br/>\n    Base64-encoded Adaptive Multi-Rate.</li>\n  <li>audio/amr-wb\n    <br/>\n    Base64-encoded Adaptive Multi-Rate Wideband. This is the default value.</li>\n  <li>audio/x-wav\n    <br/>\n    Base64-encoded Waveform.</li>\n</ul>\n\n</div></li><li><span class='pre'>contentLanguage</span> : String<div class='sub-desc'><p>The language of the text in the <b>body</b> parameter value. The following values are defined for this parameter.</p>\n\n<ul>\n  <li>en-US\n    <br/>\n    US English. This is the default value.</li>\n  <li>es-US\n    <br/>\n    US Spanish.</li>\n</ul>\n\n</div></li><li><span class='pre'>contentLength</span> : Number<div class='sub-desc'><p>Specifies the length, in bytes, of the text in the <b>body</b> value.</p>\n</div></li><li><span class='pre'>xArg</span> : String<div class='sub-desc'><p>Specifies the multipart paramaters for the X-Arg header.</p>\n</div></li></ul></div></li></ul></div></li></ul></div></li><li><span class='pre'>options</span> : Object<div class='sub-desc'><p>An object containing the success and failure callbacks.</p>\n<ul><li><span class='pre'>onSuccess</span> : Function<div class='sub-desc'><p>Specifies the function that is called if the method returns succeeds.</p>\n</div></li><li><span class='pre'>onFailure</span> : Function<div class='sub-desc'><p>Specifies the function that is called if the method fails.</p>\n</div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Binary data in the format specified by the <b>accept</b> parameter, or audio/amr-wb (Adaptive Multi-Rate Wideband), if the <b>accept</b> parameter is not specified, containing the audio transcription.</p>\n\n<p><b>Example</b></p>\n\n<p>The following example gets a WAV version of the text \"Hello world\".</p>\n\n<pre><code>params = {\n   'accept' : 'audio/x-wav',\n   'accessToken' : '&lt;accessToken value&gt;',\n   'body' : 'Hello world',\n   'contentType' : 'text/plain',\n   'contentLength' : 11,\n   'contentLanguage' : 'en-US',\n   'xArg' : \"VoiceName=mike'\n};\ninvocationData = {\n   adapter : 'TextToSpeech' ,\n   procedure : 'textToSpeech' ,\n   parameters : [params]           \n};\noptions = {\n   onSuccess : successCallback ,\n   onFailure : failureCallback\n   invocationContext : {}\n};\n\nWL.Client.invokeProcedure(invocationData, options);\n</code></pre>\n</div></li></ul></div></div></div></div></div></div></div>"});